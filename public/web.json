{
    "brief": {
        "un": "使用React和Spring技术栈构建的学生信息管理系统",
        "detail": [
            "在本项目的实现过程中，我们参考过往项目实践中的开发流程，首先进行了需求分析，并通过思维导图的方式对需求进行了整理和分析，在此基础上讨论基本的数据结构。",
            "https://s2.loli.net/2023/01/03/bxhdQo6upyvePNF.png",
            "在此基础上，考虑到团队成员的个人技术栈，我们选择使用React家族搭建前端，Spring构建后端。",
            "具体来讲，前端使用React+MUI绘制出美观且符合Material3设计规范的界面，并进行了完整的响应化设计，支持主题系统和夜间模式。对于异步状态管理，我们选择了react-query提供支持。",
            "考虑到架构的先进性和学习空间，我们选择微服务作为后端架构。使用Nacos提供服务发现、服务治理和配置中心，使用基于Webflux异步IO结构的Spring Cloud Gateway作为网关服务提供统一鉴权、拦截和强大的流量分发能力，其余服务由Spring Boot搭建，并通过OpenFeign进行服务间通信。",
            "与此同时，我们借助nextcloud搭建了私有云存储，并在此基础上与后端部分服务通过OkHttp深度结合提供图床能力，并为更多潜在的文件存储需求提供可能。",
            "https://s2.loli.net/2023/01/03/5SBuM2CHgFztKPJ.png",
            "除此以外，借助Docker、Portainer和Jenkins，我们搭建起一套半自动的CI/CD系统，实现了功能的快速更新、部署和维护。",
            "https://s2.loli.net/2023/01/03/NAZgQfIhpHkXorx.png",
            "https://s2.loli.net/2023/01/03/bnC8ZxrHVyqkpsu.png",
            "最后，我们将所有服务托管在私有域名下，使用Nginx进行反向代理和统一的请求头处理，配合网关服务和其他子服务提供完善的CORS解决方案。"
        ]
    },
    "duty": {
        "un": "负责后端的整体架构搭建和学生端代码",
        "detail": [
            "进行了本项目后端程序的初始化搭建，包括调整Maven依赖关系、父子模块依赖管理、版本管理和公共模块的分离。",
            "进行了一系列工具类的编写，例如加密用的AESUtil、BASE64Util，用于反射系统的反射工具类，实现自动封装VO的工具类",
            "在代码编写过程中，大胆引入流式API和lambda表达式，提高代码的可读性，降低复杂度，为代码提供了更强大的能力",
            "集成文件上传操作，实现图床系统，并连接到头像系统、验证码系统",
            "对所有服务进行微服务化处理，使用boostrap作为启动配置，支持多环境配置，并将主配置文件迁移到nacos配置中心",
            "实现一套健全的CORS处理策略。通过从Nginx到网关再到各个服务的设计实现统一CORS处理"
        ]
    },
    "backend": {
        "un": "使用了时下流行的技术和架构",
        "detail": [
            "服务个体使用Spring Boot进行搭建，比较特别的是网关使用了WebFlux为基础的Spring Cloud Gateway来提供更高的IO性能；服务之间通过Spring Cloud Alibaba作为微服务框架组织起整个服务",
            "对于服务之间的调用，使用OpenFeign提供支持；辅以OkHttp解决边缘需求",
            "Nacos作为服务治理中心和配置中心，提供动态服务编排和配置中心能力，使得我们的服务具有动态更新的能力",
            "使用JWT作为基本的Token形式，在payload端内配置需要的信息，并使用自定义注入系统实现自动信息提取",
            "使用AES作为密码加密方法，拒绝明文存储，使得系统更加安全；多处使用BASE64进行编码，避免特殊字符影响系统安全",
            "实现若干自定义注解和自定义过滤器，通过花式操作HTTP，使得系统具有了便捷的过滤和信息注入能力",
            "大量使用Java的反射特性，实现了自动封装VO的功能，使得我们的代码更加简洁，泛用性更强"
        ]
    },
    "deploy": {
        "un": "使用了Docker、Jenkins、Nginx等技术",
        "detail": [
            "使用Docker进行容器化部署，使得我们的服务可以在任何环境下运行,并且可以在任何环境下进行部署",
            "使用Jenkins进行持续集成，实现了自动化部署，使得我们可以便捷的进行部署，发布新版本",
            "使用Nginx进行反向代理，将所有服务统一到一个端口，使得我们可以更加方便的进行访问"
        ]
    }
}